{"notes":[{"category":"后端","catalog":"mysql","title":"MySQL常用命令","title_group":"mysql基础","content":"### 数据库\n```bash\n# 查看所有的数据库\nSHOW DATABASES ;\n# 创建一个数据库\nCREATE DATABASE k;\n# 删除一个数据库\nDROP DATABASE k;\n# 使用这个数据库\nUSE k;\n```\n### 表\n```bash\n# 查看所有的表\nSHOW TABLES ;\n# 创建一个表\nCREATE TABLE n(id INT, name VARCHAR(10));\nCREATE TABLE m(id INT, name VARCHAR(10), PRIMARY KEY (id), FOREIGN KEY (id) REFERENCES n(id), UNIQUE (name));\nCREATE TABLE m(id INT, name VARCHAR(10));\n# 直接将查询结果导入或复制到新创建的表\nCREATE TABLE n SELECT * FROM m;\n# 新创建的表与一个存在的表的数据结构类似\nCREATE TABLE m LIKE n;\n# 创建一个临时表\n# 临时表将在你连接MySQL期间存在。当断开连接时，MySQL将自动删除表并释放所用的空间。也可手动删除。\nCREATE TEMPORARY TABLE l(id INT, name VARCHAR(10));\n# 直接将查询结果导入或复制到新创建的临时表\nCREATE TEMPORARY TABLE tt SELECT * FROM n;\n# 删除一个存在表\nDROP TABLE IF EXISTS m;\n# 更改存在表的名称\nALTER TABLE n RENAME m;\nRENAME TABLE n TO m;\n# 查看表的结构(以下五条语句效果相同）\nDESC n;   # 因为简单，所以建议使用\nDESCRIBE n;\nSHOW COLUMNS IN n;\nSHOW COLUMNS FROM n;\nEXPLAIN n;\n# 查看表的创建语句\nSHOW CREATE TABLE n;\n```\n","create_time":"2022/1/2 上午3:15:12","timestamp":1641064512634,"id":1},{"category":"调试","catalog":"前端","title":"state数据未导出","title_group":"vue3","content":"## state数据未导出\n\n```bash\nProperty \"xxx\" was accessed during render but is not defined on instance. \n```\n\n将 state 中的 columns 导出给 template 使用即可; script-setup 语法为:\n```bash\nlet { columns } = toRefs(state)\n```\n","create_time":"2022/1/2 上午3:14:20","timestamp":1641064460333,"id":2},{"category":"前端","catalog":"css","title":"Flex 属性整理","title_group":"css布局","content":"### Flex 作用于容器上的6个属性\n1、flex-direction\n用于指定Flex主轴的方向，继而决定 Flex子项在Flex容器中的位置\n\n取值：row | row-reverse | column | column-reverse\n\nrow：默认值，表示水平方向从左到右排列，此时水平方向轴线为主轴\nrow-reverse：与row相反\ncolumn：表示垂直方向从上到下排列，此时垂直方向轴线为主轴\ncolumn-reverse：与column相反\n\n2、flex-wrap\n用于指定Flex子项是否换行\n取值：nowrap | wrap | wrap-reverse\n\nnowrap：默认值，表示不换行，Flex子项可能会溢出\nwrap：表示换行，溢出的Flex子项会被放到下一行\nwrap-reverse：表示反方向换行\n\n3、flex-flow\n复合属性，是flex-direction 和 flex-wrap 的简写属性，是用于指定Flex子项的排列方式\n\n4、justify-content\n用于指定主轴(水平方向)上Flex子项的对齐方式\n取值：flex-start | flex-end | center | space-between | space-around\n\nflex-start：默认值，表示与行的起始位置对齐\nflex-end：表示与行的结束位置对齐\ncenter：表示与行中间对其\nspace-between：表示两端对齐，中间间距相等。要注意特殊情况，当剩余空间为负数或者只有一个项时，效果等同于flex-start\nspace-around：表示间距相等，中间间距是两端间距的2倍。要注意特殊情况，当剩余空间为负数或者只有一个项时，效果等同于center\n\n5、align-items\n用于指定侧轴(垂直方向)上Flex子项的对齐方式\n\n取值：stretch | flex-start | flex-end | center | baseline\n\nstretch：默认值，当Flex子项未设置高度或者高度值为auto时，stretch起作用，将Flex子项高度设置为行高度。这里需要注意，在只有一行的情况下，行的高度为容器的高度，即Flex子项高度为容器的高度\nflex-start：表示与侧轴开始位置对齐\nflex-end：表示与侧轴的结束位置对齐\ncenter：表示与侧轴中间对其\nbaseline：表示基线对齐，当行内轴与侧轴在同一线上，即所有Flex子项的基线在同一线上时，效果等同于flex-start\n\n6、align-content\n该属性只作用于多行的情况下，用于多行的对齐方式\n取值：stretch | flex-start | flex-end | center | space-between | space-around\n\nstretch：默认值，当Flex子项未设置高度或者高度值为auto时，stretch起作用，将Flex子项高度设置为行高度。\nflex-start：表示各行与侧轴开始位置对齐，第一行紧靠侧轴开始边界，之后的每一行都紧靠前面一行\nflex-end：表示各行与侧轴的结束位置对齐，最后一行紧靠侧轴结束边界，之后的每一行都紧靠前面一行\ncenter：表示各行与侧轴中间对其\nspace-between：表示两端对齐，中间间距相等。要注意特殊情况，当剩余空间为负数时，效果等同于flex-start\nspace-around：表示各行之间间距相等，中间间距是两端间距的2倍。要注意特殊情况，当剩余空间为负数时，效果等同于center\n再次强调：该属性只作用于多行的情况，在只有一行的Flex容器上无效，另外该属性可以很好的处理，换行以后相邻行之间产生的间距。\n\n### Flex 作用于子项上的6个属性\n1、order\n该属性用来指定Flex子项的排列顺序，数值越小，越靠前，可以为负数\n\n取值：数值，默认值为0\n\n2、flex-grow\n用来指定Flex子项的扩展比例，不可以为负数，Flex容器会根据Flex子项设置的扩展比例作为比率来分配剩余空间\n\n取值：数值，默认值为0，表示即使存在剩余空间，Flex子项也不会扩展\n\n3、flex-shrink\n用来指定Flex子项的收缩比例，不可以为负数，Flex容器会根据Flex子项设置的收缩比例作为比率来收缩各个Flex子项\n\n取值：数值，默认值为1，表示所有子项在剩余空间为负数时，等比例收缩\n\n注意：flex-shrink只能在不换行的情况下使用\n\n4、flex-basis\n用来指定Flex子项的占据的空间，不可以为负数\n取值：auto | length | percentage | content\n\nauto：默认值，计算规则：检索Flex子项是否设置了width值（或者height值，取决于flex-direction），如果设置了非auto的值，则使用width值（或者height值），若没有则使用content\nlength：用长度值定义宽度，不可为负数\npercentage：使用百分比定义宽度，不可为负数\n\n5、flex\n复合属性，是flex-grow 、 flex-shrink 和 flex-basis 的简写属性，用来指定Flex子项如何分配空间\n取值：none | 各拆分项属性\n\nnone：0 0 auto\nauto：1 1 auto\n1：1 1 0%\n0 auto 或 initial：0 1 auto 即初始值\n注意：\n\nflex-grow：默认值为0，若省略则被默认为1\nflex-shrink：默认值为1，省略时默认为1\nflex-basis：默认值为auto，省略时默认为0%\n\n6、align-self\n用来单独指定某Flex子项的对齐方式\n取值：auto | flex-start | flex-end | center | baseline | stretch\n\nauto：默认值，查找父元素的align-items值，如果没有则取值为stretch\n其他值同align-items\n","create_time":"2022/1/2 上午3:09:42","timestamp":1641064182273,"id":3},{"category":"运维","catalog":"nginx","title":"nginx 服务器安装 ssl 证书","title_group":"ssl 证书","content":"### nginx 服务器安装 ssl 证书\n\n在阿里云购买 DigiCert 免费版 SSL 证书；\n到 SSL 证书管理页面的“免费证书”栏申请签发证书，注意 CSR 生成方式不要选手动；\n证书签发后下载对应 nginx 服务器的证书，解压后得到证书文件；\n登录服务器，在 Nginx 安装目录默认为 /usr/local/nginx/conf 下新建证书文件夹 cert，将证书文件上传到该文件夹中；\n编辑 Nginx 配置文件\n```bash\nvim /usr/local/nginx/conf/nginx.conf\n```\n修改 http 下的两个 server 代码块为：\n```shell\nserver {\n        listen       80;\n        server_name  域名;\n\trewrite ^(.*)$ https://$host$1; # 设置HTTP请求自动跳转HTTPS\n\tlocation / {\n            index index.html index.htm;\n    \t}\n}\n```\n```shell\n# HTTPS server\n    server {\n\tlisten 443 ssl;\n        server_name 域名;\n        root html;\n        index index.html index.htm;\n\n        ssl_certificate cert/证书名称.pem;\n        ssl_certificate_key cert/证书名称.key;\n        ssl_session_timeout 5m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n        # 表示使用的加密套件的类型，删除TLSv1.0版本\n        ssl_protocols TLSv1.1 TLSv1.2; #表示使用的TLS协议的类型。\n        ssl_prefer_server_ciphers on;\n        \n        \n        location / {\n        \troot   html;\n                index  index.html index.htm;\n        }\n\n    }\n```\n重启 Nginx 服务\n```bash\ncd /usr/local/nginx/sbin  # 进入Nginx服务的可执行目录。\n./nginx -s reload  # 重新载入配置文件。\n```\n如果重启nginx时报错nginx: [error] open() \"/usr/local/nginx/logs/nginx.pid\" failed (2: No such file or directory)，\n确保 nginx.conf 的 pid        logs/nginx.pid 项没有被注释，\n使用指定nginx.conf文件的方式重启nginx;\n```bash\n/usr/local/nginx/sbin/nginx -c /usr/local/nginx/conf/nginx.conf\n```\n确保服务器开启 443 端口防火墙；\n成功后网站即可以 https 的方式访问；","create_time":"2022/1/2 上午3:11:22","timestamp":1641064282275,"id":4},{"category":"工具","catalog":"git","title":"Git 常用命令","title_group":"git 基础","content":"### Git 常用命令\n\n```bash\n# create a new repository on the command line\necho \"# itNote\" >> README.md\ngit init\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\ngit remote add origin https://github.com/用户名/仓库名.git\ngit push -u origin main\n\n# push an existing repository from the command line\ngit remote add origin https://github.com/用户名/仓库名.git\ngit branch -M main\ngit push -u origin main\n\n# 免密连接服务器\nscp ~/.ssh/id_rsa.pub root@xx.xx.xx.xx:/root/.ssh/authorized_keys\n\n# 拉取远程仓库代码强制覆盖本地文件\ngit fetch --all\ngit reset --hard origin/master\ngit pull\n\n# 新建分支\ngit branch 分支名\n\n# 切换到分支\ngit checkout 分支名\n\n# 合并分支到 master， 先切换到 master 分支再合并\ngit merge 分支名\n\n# 删除已设置的 origin\ngit remote rm origin\n\n```","create_time":"2022/1/2 上午3:12:21","timestamp":1641064341828,"id":5}]}